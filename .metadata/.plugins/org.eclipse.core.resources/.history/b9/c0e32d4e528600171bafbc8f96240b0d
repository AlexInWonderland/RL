import burlap.oomdp.auxiliary.DomainGenerator;
import burlap.oomdp.core.Domain;
import burlap.oomdp.core.TerminalFunction;
import burlap.oomdp.core.states.State;
import burlap.oomdp.singleagent.RewardFunction;
import burlap.oomdp.statehashing.SimpleHashableStateFactory;
import burlap.domain.singleagent.graphdefined.GraphDefinedDomain;

public class MDPSolver {
	
	DomainGenerator dg;
    Domain domain;
    State initState;
    RewardFunction rf;
    TerminalFunction tf;
    SimpleHashableStateFactory hashFactory;
    int numStates;
    int numActions;
    
	public MDPSolver(int numStates, int numActions, 
			double[][][] probabilitiesOfTransitions, double[][][] rewards){
		   
		   this.numStates = numStates;
		   this.numActions = numActions;
		   this.dg = new GraphDefinedDomain(this.numStates);
		   for (int i = 0; i < numStates; i++ ){
			 for(int j = 0; j < numActions; j++){ 
				 for (int k = 0; k < numStates; k++)
		            ((GraphDefinedDomain)this.dg).setTransition(i, j, k, 
		        		                            probabilitiesOfTransitions[i][j][k]);
		     }
		   }
		
	}
	
	public double valueOfState(int state, double gamma){
		double value = 0;
		
		return value;
	}

}
